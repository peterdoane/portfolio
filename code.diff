diff --git a/src/App.js b/src/App.js
index a204183..dd0f374 100644
--- a/src/App.js
+++ b/src/App.js
@@ -2,6 +2,7 @@ import React, { Component } from 'react';
 import Menu from './menu/';
 import Footer from './footer';
 import Routes from './routes.js'
+import Loader from './loader';
 
 
 //<Splash />
@@ -17,6 +18,7 @@ class App extends Component {
   render() {
     return (
         <div>
+          <Loader />
           <Menu />
           <Routes />
           <Footer />
diff --git a/src/capabilities/index.jsx b/src/capabilities/index.jsx
index 4a1975f..eb50450 100644
--- a/src/capabilities/index.jsx
+++ b/src/capabilities/index.jsx
@@ -1,31 +1,34 @@
 import React from 'react';
 import './cap.css';
+import ScrollEffect from '../scroll-effect';
 
 const Capabilities = () => {
   return (
     <section className="container capabilities">
-      <div className="innerColumn">
-        <header>
-          <h2>Capabilities</h2>
-        </header>
-        <ul className="capabilityList">
-          <li>
-            <h3>Development</h3>
-            <p>No one cares about websites. People care about ideas. We translate ideas into code.
-            </p>
-          </li>
-          <li>
-            <h3>Design</h3>
-            <p>Web users are often impatient and distracted. We keep it simple and beautiful, fun and functional. The goal is to develop a strong concept supported by clean aesthetic to engage the user. 
-            </p>
-          </li>
-          <li>
-            <h3>Experience</h3>
-            <p>We don't make sites. We create experiences. Sharp, crisp, minimalistic. We are user focused and client driven.
-            </p>
-          </li>
-        </ul>
-      </div>
+      <ScrollEffect>
+        <div className="innerColumn">
+          <header>
+            <h2>Capabilities</h2>
+          </header>
+          <ul className="capabilityList">
+            <li>
+              <h3>Development</h3>
+              <p>No one cares about websites. People care about ideas. We translate ideas into code.
+              </p>
+            </li>
+            <li>
+              <h3>Design</h3>
+              <p>Web users are often impatient and distracted. We keep it simple and beautiful, fun and functional. The goal is to develop a strong concept supported by clean aesthetic to engage the user.
+              </p>
+            </li>
+            <li>
+              <h3>Experience</h3>
+              <p>We don't make sites. We create experiences. Sharp, crisp, minimalistic. We are user focused and client driven.
+              </p>
+            </li>
+          </ul>
+        </div>
+      </ScrollEffect>
     </section>
   )
 }
diff --git a/src/latestWork/index.jsx b/src/latestWork/index.jsx
index e28eb09..70bd741 100644
--- a/src/latestWork/index.jsx
+++ b/src/latestWork/index.jsx
@@ -1,9 +1,11 @@
 import React from 'react';
 import './latestWork.css';
+import ScrollEffect from '../scroll-effect';
 
 const LatestWork = () => {
 return (
 <section className="container latest">
+<ScrollEffect>
 <div className="innerColumn">
 <header>
 <h2>Latest Work</h2>
@@ -45,6 +47,7 @@ Big, small, online, offline, local or international.Size doesn 't matter. We wor
 <a className="button">View All Work</a>
 </footer>
 </div>
+</ScrollEffect>
 </section>
 );
 }
diff --git a/src/loader/index.jsx b/src/loader/index.jsx
index 4b0f52c..6a3418f 100644
--- a/src/loader/index.jsx
+++ b/src/loader/index.jsx
@@ -1,58 +1,57 @@
+import React, { Component } from 'react';
+import './loader.css';
 
- import React, { Component } from 'react';
- import './loader.css';
+class Menu extends Component {
 
- class Loader extends Component {
-     constructor() {
-       super();
-       this.state = {
-         show_loader: true,
-         is_transitioning: false
-       }
-
-     }
-
-     componentDidMount() {
-       setTimeout(this.hideLoader, 1000);
-     }
-
-     hideLoader = () => {
-       this.setState({
+    constructor() {
+        super();
+        this.state = {
             show_loader: true,
-            is_transitioning: true
+            is_transitioning: false,
+            loader_tranistion: false
+        };
+    }
+
+    componentDidMount() {
+        setTimeout(this.animateLoaderText, 700);
+    }
+
+    animateLoaderText = () => {
+        const {loader_tranistion} = this.state;
+        this.setState({
+            loader_tranistion: !loader_tranistion
         });
-        setTimeout(function() {
-          this.setState({
-              show_loader: false,
-              is_transitioning: false
-          });
-       }.bind(this), 200);
-     }
+        setTimeout(this.hideLoader, 1000);
+    }
 
-    render() {
-      const {show_loader=false, is_transitioning=false} = this.state;
+    hideLoader = () => {
+        const {is_transitioning} = this.state;
+        this.setState({
+            is_transitioning: !is_transitioning
+        });
+    }
+
+    renderLoaderText = () => {
+        const {loader_tranistion} = this.state;
+        return (
+            <div className="loader-logo-wrapper">
+                <span className="loader-logo-bg" style={{transform: loader_tranistion ? "translateY(150%)" : "translateY(-150%)"}}></span>
+                <span className="loader-logo">Garvit</span>
+            </div>
+        );
+    }
 
-      if (show_loader && is_transitioning) {
+    render() {
+        const {show_loader, is_transitioning} = this.state;
+        if (show_loader) {
             return (
-               <div>
-                  <div className="container loader transition">
-
-                  </div>
-                  <button  className="loaderButton"> Loading </button>
-                  </div>
-              );
-       } else if (show_loader) {
-          return (
-            <div>
-              <div className="container loader">
-              </div>
-              <button  className="loaderButton"> Loading </button>
-              </div>
-          );
-      }
-      return null;
-
-     }
-  }
-
-export default Loader
+                <div className="container loader" style={{transform: is_transitioning ? "translateY(150%)" : "translateY(0)"}}>
+                    {this.renderLoaderText()}
+                </div>
+            );
+        }
+        return null;
+    }
+}
+
+export default Menu;
diff --git a/src/loader/loader.css b/src/loader/loader.css
index a7866e8..3940ea6 100644
--- a/src/loader/loader.css
+++ b/src/loader/loader.css
@@ -1,22 +1,54 @@
 .loader {
-     width: 100%;
-     position: absolute;
-     height: 100%;
-     z-index: 10;
-     background: white;
-     top: 0px;
-     transition: top .8s ease-in;
- }
+    width: 100%;
+    position: fixed;
+    height: 100%;
+    z-index: 10;
+    background: white;
+    top: 0px;
+    transition: transform 1s ease-in-out;
+}
 
- .transition {
-     top: 1000px;
- }
+.transition {
+    top: 1000px;
+}
 
- .loaderButton {
-   width: 200px;
-   height: 100px;
-   z-index: 20;
-   color: white;
-   background: black;
-   top: 45%;
- }
+.loader-logo-wrapper {
+    position: absolute;
+    top: 50%;
+    left: 50%;
+    margin-top: -22px;
+    margin-left: -52.5px;
+    overflow: hidden;
+    width: 105px;
+    height: 44px;
+}
+
+.loader-logo-bg {
+    position: absolute;
+    top: 0;
+    left: 0;
+    background: blue;
+    width: 100%;
+    height: 100%;
+    transition: transform 1s cubic-bezier(0.000,  0.970, 1.000, 0.030);
+}
+
+
+.loader-logo-text {
+    position: absolute;
+    top: 0;
+    left: 0;
+    background: blue;
+    width: 100%;
+    height: 100%;
+    transition: transform 1s cubic-bezier(0.000,  0.970, 1.000, 0.030);
+}
+
+.loader-logo {
+    position: relative;
+    width: 100%;
+    height: 100%;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+}
diff --git a/src/menu/menu.css b/src/menu/menu.css
index cf9fff9..bd6396b 100644
--- a/src/menu/menu.css
+++ b/src/menu/menu.css
@@ -15,7 +15,7 @@
   justify-content: space-between;
 }
 .siteHeader .link:hover{
-	text-decoration: none;
+  text-decoration: none;
 }
 
 .siteHeader .link{
diff --git a/src/project1/index.jsx b/src/project1/index.jsx
index 03b0590..fd45fc3 100644
--- a/src/project1/index.jsx
+++ b/src/project1/index.jsx
@@ -1,14 +1,17 @@
 import React from 'react';
 import './project1.css';
+import ScrollEffect from '../scroll-effect';
 
 const Project = () => {
   return(
   <section className="container project">
-    <div className="innerColumn">
-        <figure className="imageWrapper">
-          <img src="images/360modernport.png" alt="360modernport" title="360modernport" />
-        </figure>
-    </div>
+    <ScrollEffect>
+        <div className="innerColumn">
+            <figure className="imageWrapper">
+              <img src="images/360modernport.png" alt="360modernport" title="360modernport" />
+            </figure>
+        </div>
+    </ScrollEffect>
   </section>
   );
 }
diff --git a/src/project1/project1.css b/src/project1/project1.css
index 8650b6c..8cf7e04 100644
--- a/src/project1/project1.css
+++ b/src/project1/project1.css
@@ -23,7 +23,6 @@
     }
   .project{
     background-color: white;
-    height: 100vh;
   }
   .project .imageWrapper{
     margin-top: 0px;
diff --git a/src/scroll-effect/index.jsx b/src/scroll-effect/index.jsx
new file mode 100644
index 0000000..c7870a0
--- /dev/null
+++ b/src/scroll-effect/index.jsx
@@ -0,0 +1,72 @@
+import React, { Component } from 'react';
+import './scroll-effect.css';
+
+class ScrollEffect extends Component {
+
+    constructor() {
+        super();
+        this.state = {
+            animated: false,
+            is_transitioning: false
+        };
+        if (window && window.addEventListener) {
+            window.addEventListener('scroll', this.handleScroll);
+        }
+    }
+
+    componentDidMount() {
+        this.handleScroll();
+    }
+
+    componentWillUnmount() {
+        if (window && window.addEventListener) {
+            window.removeEventListener('scroll', this.handleScroll);
+        }
+    }
+
+    posTop() {
+        if (typeof window.pageYOffset !== 'undefined') {
+            return window.pageYOffset;
+        } else if (document.documentElement.scrollTop) {
+            return document.documentElement.scrollTop;
+        } else if (document.body.scrollTop) {
+            return document.body.scrollTop;
+        }
+        return 0;
+    }
+
+    handleScroll = () => {
+        const element = this.node;
+        const top = this.posTop();
+        const elementPositionY = element.getBoundingClientRect().top + top;
+        const scrollPositionY = window.scrollY ? window.scrollY : window.pageYOffset;
+        const windowHeight = window.innerHeight;
+        if (scrollPositionY + windowHeight >= elementPositionY) {
+            this.setState({
+              animated: true,
+              is_transitioning: true
+            });
+        }
+    }
+
+    render() {
+        const {is_transitioning} = this.state;
+        const style = {
+            transform: is_transitioning ? "translateY(0)" : "translateY(4%)",
+            opacity: is_transitioning ? "1" : "0",
+            ...this.props.style
+        };
+        return (
+            <div
+                className="scroll-effect"
+                style={style}
+                ref={(node) => { this.node = node; }}
+            >
+                {this.props.children}
+            </div>
+        );
+    }
+
+}
+
+export default ScrollEffect;
diff --git a/src/scroll-effect/scroll-effect.css b/src/scroll-effect/scroll-effect.css
new file mode 100644
index 0000000..e9079f2
--- /dev/null
+++ b/src/scroll-effect/scroll-effect.css
@@ -0,0 +1,3 @@
+.scroll-effect {
+    transition: transform 1s ease-in-out, opacity 1s ease-in-out;
+}
diff --git a/src/services/index.jsx b/src/services/index.jsx
index 81fe3f2..6b88b87 100644
--- a/src/services/index.jsx
+++ b/src/services/index.jsx
@@ -1,26 +1,29 @@
 import React from 'react';
 import './services.css';
+import ScrollEffect from '../scroll-effect';
 
 const Services = () => {
   return (
       <section className="container services">
-        <div className="innerColumn">
-          <header><h2>All Services</h2></header>
-          <ul className="listing">
-            <li className="service">APIs</li>
-            <li className="service">CSS</li>
-            <li className="service">Debugging</li>
-            <li className="service">Javascript</li>
-            <li className="service">Typography</li>
-            <li className="service">Mobx/Redux</li>
-            <li className="service">Node.js</li>
-            <li className="service">React/React-Native</li>
-            <li className="service">Responsive Design</li>
-            <li className="service">UX/UI Design</li>
-            <li className="service">Website/App Design</li>
-            <li className="service">Wordpress</li>
-          </ul>
-        </div>
+        <ScrollEffect>
+          <div className="innerColumn">
+            <header><h2>All Services</h2></header>
+            <ul className="listing">
+              <li className="service">APIs</li>
+              <li className="service">CSS</li>
+              <li className="service">Debugging</li>
+              <li className="service">Javascript</li>
+              <li className="service">Typography</li>
+              <li className="service">Mobx/Redux</li>
+              <li className="service">Node.js</li>
+              <li className="service">React/React-Native</li>
+              <li className="service">Responsive Design</li>
+              <li className="service">UX/UI Design</li>
+              <li className="service">Website/App Design</li>
+              <li className="service">Wordpress</li>
+            </ul>
+          </div>
+        </ScrollEffect>
       </section>
   )
 }
