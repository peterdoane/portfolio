commit 278cf9231b857aa3b61817143da9ddcb3838aab1
Author: Garvit Khatri <garvitdelhi@gmail.com>
Date:   Tue Sep 5 01:04:53 2017 +0530

    test commit

diff --git a/package.json b/package.json
index 77fff57..a1b6d67 100644
--- a/package.json
+++ b/package.json
@@ -4,10 +4,12 @@
   "private": true,
   "dependencies": {
     "react": "^15.6.1",
+    "react-addons-transition-group": "^15.6.0",
     "react-custom-scrollbars": "^4.1.2",
     "react-dom": "^15.6.1",
     "react-router": "^4.2.0",
     "react-router-dom": "^4.2.2",
+    "react-router-transition": "^1.0.0",
     "react-scripts": "1.0.11"
   },
   "scripts": {
diff --git a/src/animated-switch/RouteTransition.js b/src/animated-switch/RouteTransition.js
new file mode 100644
index 0000000..d4ff853
--- /dev/null
+++ b/src/animated-switch/RouteTransition.js
@@ -0,0 +1,111 @@
+import React, { cloneElement, createElement, Component } from 'react';
+import TransitionMotion from 'react-motion/lib/TransitionMotion';
+import PropTypes from 'prop-types';
+import spring from 'react-motion/lib/spring';
+import './transition.css';
+
+function ensureSpring(styles) {
+  const a = Object.keys(styles).reduce((acc, key) => {
+    const value = styles[key];
+    acc[key] = typeof value === 'number' ? spring(value, {stiffness: 135, damping: 26}) : value;
+    return acc;
+  }, {});
+  console.log(a);
+  return a;
+};
+
+const identity = val => val;
+
+class RouteTransition extends Component {
+  static defaultProps = {
+    wrapperComponent: 'div',
+    runOnMount: false,
+    mapStyles: identity,
+  };
+
+  getDefaultStyles() {
+    if (!this.props.runOnMount) {
+      return null;
+    }
+
+    if (!this.props.children) {
+      return [];
+    }
+
+    return [
+      {
+        key: this.props.children.key,
+        data: this.props.children,
+        style: this.props.atEnter,
+      },
+    ];
+  }
+
+  // there's only ever one route mounted at a time,
+  // so just return the current match
+  getStyles() {
+    if (!this.props.children) {
+      return [];
+    }
+
+    return [
+      {
+        key: this.props.children.key,
+        data: this.props.children,
+        style: ensureSpring(this.props.atActive),
+      },
+    ];
+  }
+
+  willEnter = () => {
+    return this.props.atEnter;
+  };
+
+  willLeave = () => {
+    return ensureSpring(this.props.atLeave);
+  };
+
+  renderRoute = config => {
+    const props = {
+      key: config.key,
+    };
+
+    const style = this.props.mapStyles(config.style);
+    // if (style.top < 0) {
+    //   style.top = -1*style.top ;
+    // }
+    console.log(style);
+    style.top = style.top + "%";
+    style.display = style.active > 99 ? "none" : "block";
+
+    return (
+      <div>
+        <div className="transition" style={style}></div>
+        {createElement(this.props.wrapperComponent, props, config.data)}
+      </div>
+    );
+  };
+
+  renderRoutes = interpolatedStyles => {
+    return (
+      <div className={this.props.className}>
+        {interpolatedStyles.map(this.renderRoute)}
+      </div>
+    );
+  };
+
+  render() {
+    return (
+      <TransitionMotion
+        defaultStyles={this.getDefaultStyles()}
+        styles={this.getStyles()}
+        willEnter={this.willEnter}
+        willLeave={this.willLeave}
+      >
+        {this.renderRoutes}
+      </TransitionMotion>
+    );
+  }
+}
+
+export default RouteTransition;
\ No newline at end of file
diff --git a/src/animated-switch/index.js b/src/animated-switch/index.js
new file mode 100644
index 0000000..a688db2
--- /dev/null
+++ b/src/animated-switch/index.js
@@ -0,0 +1,71 @@
+import React from 'react';
+import Route from 'react-router-dom/Route';
+import Switch from 'react-router-dom/Switch';
+import matchPath from 'react-router-dom/matchPath';
+import PropTypes from 'prop-types';
+
+import RouteTransition from './RouteTransition';
+
+const NO_MATCH = {
+  key: 'no-match',
+};
+
+/**
+ * Some superfluous work, but something we need to do in order
+ * to persist matches/allow for nesting/etc.
+ */
+function getMatchedRoute(children, pathname) {
+  return React.Children.toArray(children).find(child => {
+    return matchPath(pathname, {
+      exact: child.props.exact,
+      path: child.props.path,
+    });
+  }) || NO_MATCH;
+}
+
+class AnimatedSwitch extends React.Component {
+
+  state = {
+    key: this.props.location.key,
+    match: getMatchedRoute(this.props.children, this.props.location.pathname),
+  };
+
+  matches = 0;
+
+  componentWillReceiveProps(nextProps) {
+    const nextMatch = getMatchedRoute(
+      nextProps.children,
+      nextProps.location.pathname,
+    );
+
+    if (this.state.match.key !== nextMatch.key) {
+      this.setState({
+        match: nextMatch,
+        key: nextProps.location.key + ++this.matches,
+      });
+    }
+  }
+
+  render() {
+    const { children, location, match, ...routeTransitionProps } = this.props;
+
+    return (
+      <RouteTransition {...routeTransitionProps}>
+        <Switch key={this.state.key} location={location}>
+          {children}
+        </Switch>
+      </RouteTransition>
+    );
+  }
+}
+
+// inject location as a prop so we can listen for changes
+const RouteWrapper = props => (
+  <Route
+    children={({ location }) => (
+      <AnimatedSwitch location={location} {...props} />
+    )}
+  />
+);
+
+export default RouteWrapper;
\ No newline at end of file
diff --git a/src/animated-switch/transition.css b/src/animated-switch/transition.css
new file mode 100644
index 0000000..7437331
--- /dev/null
+++ b/src/animated-switch/transition.css
@@ -0,0 +1,8 @@
+.transition {
+	position: absolute;
+	background: white;
+	top: 150%;
+	width: 100%;
+	height: 100%;
+	z-index: 9;
+}
\ No newline at end of file
diff --git a/src/contactPage.js b/src/contactPage.js
index f3c20a6..6cbecf9 100644
--- a/src/contactPage.js
+++ b/src/contactPage.js
@@ -1,70 +1,84 @@
-import React from 'react';
-import ScrollEffect from './scroll-effect/';
+import React, {Component} from 'react';
+import ScrollEffect from './scroll-effect';

+class ContactPage extends Component {

-const ContactPage = (props) => {
-  const {loader_loaded=false} = props;
-  return (
-    <div>
-      <section className="container splash interior">
-        <ScrollEffect is_active={loader_loaded} translateY_initial={-4} delay={100}>
-            <div className="innerColumn">
-              <h1 className="splashText">
-                Give us a call or send us an email.<br/>peterdoane@gmail.com
-              </h1>
-            </div>
-        </ScrollEffect>
-      </section>
-      <section className="container contacts">
-        <ScrollEffect is_active={loader_loaded} delay={100}>
-            <div className="innerColumn">
-              <ul className="contactTypeList">
-                <li className="contactType">
-                  <h2>Visit Us</h2>
-                  <ul className="socialTypeList">
-                    <li className="socialType">
-                      <a className="link">Contact Links</a>
-                    </li>
-                    <li className="socialType">
-                      <a className="link">Contact Links</a>
-                    </li>
-                    <li className="socialType">
-                      <a className="link">Contact Links</a>
-                    </li>
-                    <li className="socialType">
-                      <a className="link">Contact Links</a>
-                    </li>
-                    <li className="socialType">
-                      <a className="link">Contact Links</a>
-                    </li>
-                  </ul>
-                </li>
-                <li className="contactType">
-                  <h2>Stalk Us</h2>
-                  <ul className="socialTypeList">
-                    <li className="socialType">
-                      <a className="link">Contact Links</a>
-                    </li>
-                    <li className="socialType">
-                      <a className="link">Contact Links</a>
-                    </li>
-                    <li className="socialType">
-                      <a className="link">Contact Links</a>
-                    </li>
-                    <li className="socialType">
-                      <a className="link">Contact Links</a>
-                    </li>
-                    <li className="socialType">
-                      <a className="link">Contact Links</a>
-                    </li>
-                  </ul>
-                </li>
-              </ul>
+    renderContacts() {
+        const {loader_loaded=false} = this.props;
+        return (
+            <section className="container contacts">
+                <ScrollEffect is_active={loader_loaded} delay={100} try_reload={true}>
+                    <div className="innerColumn">
+                        <ul className="contactTypeList">
+                            <li className="contactType">
+                                <h2>Visit Us</h2>
+                                <ul className="socialTypeList">
+                                    <li className="socialType">
+                                        <a className="link">Contact Links</a>
+                                    </li>
+                                    <li className="socialType">
+                                        <a className="link">Contact Links</a>
+                                    </li>
+                                    <li className="socialType">
+                                        <a className="link">Contact Links</a>
+                                    </li>
+                                    <li className="socialType">
+                                        <a className="link">Contact Links</a>
+                                    </li>
+                                    <li className="socialType">
+                                        <a className="link">Contact Links</a>
+                                    </li>
+                                </ul>
+                            </li>
+                            <li className="contactType">
+                                <h2>Stalk Us</h2>
+                                <ul className="socialTypeList">
+                                    <li className="socialType">
+                                        <a className="link">Contact Links</a>
+                                    </li>
+                                    <li className="socialType">
+                                        <a className="link">Contact Links</a>
+                                    </li>
+                                    <li className="socialType">
+                                        <a className="link">Contact Links</a>
+                                    </li>
+                                    <li className="socialType">
+                                        <a className="link">Contact Links</a>
+                                    </li>
+                                    <li className="socialType">
+                                        <a className="link">Contact Links</a>
+                                    </li>
+                                </ul>
+                            </li>
+                        </ul>
+                    </div>
+                </ScrollEffect>
+            </section>
+        );
+    }
+
+    renderContactHeader() {
+        const {loader_loaded=false} = this.props;
+        return (
+            <section className="container splash interior">
+                <ScrollEffect is_active={loader_loaded} translateY_initial={-4} delay={100} try_reload={true}>
+                    <div className="innerColumn">
+                        <h1 className="splashText">
+                            Give us a call or send us an email.<br/>peterdoane@gmail.com
+                        </h1>
+                    </div>
+                </ScrollEffect>
+            </section>
+        );
+    }
+
+    render() {
+        return (
+            <div>
+                {this.renderContactHeader()}
+                {this.renderContacts()}
             </div>
-        </ScrollEffect>
-      </section>
-    </div>
-  )
+        );
+    }
 }
-
 export default ContactPage;
diff --git a/src/home.js b/src/home.js
index 46aa8aa..7cab20a 100644
--- a/src/home.js
+++ b/src/home.js
@@ -1,5 +1,4 @@
 import React from 'react';
-import Loader from './loader';
 import Splash from './splash/';
 import Project from './project1';
 import Capabilites from './capabilities';
@@ -11,7 +10,6 @@ import Footer from './footer';
 const Home = () => {
   return (
     <div>
-      <Loader />
       <Splash />
       <Project />
       <Capabilites />
diff --git a/src/routes.css b/src/routes.css
new file mode 100644
index 0000000..6f4bc76
--- /dev/null
+++ b/src/routes.css
@@ -0,0 +1,8 @@
+.page-transition > div{
+    position: absolute;
+    width: 100%
+}
+
+.page-transition {
+    position: relative;
+}
diff --git a/src/routes.js b/src/routes.js
index ebbfbfd..0f242eb 100644
--- a/src/routes.js
+++ b/src/routes.js
@@ -1,64 +1,108 @@
-import React from 'react';
+import React, {Component} from 'react';
 import { Switch, Route, Link } from 'react-router-dom';
+import RouteWrapper from './animated-switch';
+import ReactTransitionGroup from 'react-addons-transition-group'
 import Home from './home';
 import ContactPage from './contactPage';
 import Footer from './footer';
+import TransitionElement from './transition-element'

-const App = () => {
-  return (
-    <div>
-      <Link to="">Profile</Link>
-      <Link to="/work">Work</Link>
-      <Link to="/contact">Contact</Link>
-    </div>
-  );
-};
+class Routes extends Component {

-const Profile = () => {
-  return (
-    <div>
-      <Home />
-    </div>
-  )
-}
+  App = () => {
+    return (
+      <div>
+        <Link to="">Profile</Link>
+        <Link to="/work">Work</Link>
+        <Link to="/contact">Contact</Link>
+      </div>
+    );
+  };

-const Work = () => {
-  return (
-    <div>
-      This is the Work page
-    </div>
-  )
-}
+  Home = () => {
+    return (
+      <div>
+        <Home />
+      </div>
+    );
+  }

-const Contact = (props) => {
-  const {loader_loaded=false} = props;
-  return (
-    <div>
-      <ContactPage loader_loaded={loader_loaded}/>
-      <Footer is_absolute={true} />
-    </div>
-  )
-}
+  Profile = () => {
+    return (
+      <div>
+        <Home />
+      </div>
+    );
+  }

-const NoMatch = () => {
-  return (
-    <div>
-      This is the 404 page
-    </div>
-  )
-}
+  Work = () => {
+    return (
+      <div>
+        This is the Work page
+      </div>
+    );
+  }

-const Routes = (props) => {
-  const {loader_loaded=false} = props;
-  return (
-    <Switch>
-      <Route exact path="/" render={() => <Home />}/>
-      <Route path="/profile" render={() => <Profile />}/>
-      <Route path="/work" render={() => <Work />}/>
-      <Route path="/contact" render={() => <Contact loader_loaded={loader_loaded}/>}/>
-      <Route component={NoMatch}/>
-    </Switch>
-  );
-};
+  Contact = () => {
+    const {loader_loaded=false} = this.props;
+    return (
+      <div>
+        <ContactPage loader_loaded={loader_loaded}/>
+        <Footer is_absolute={true} />
+      </div>
+    );
+  }
+
+  NoMatch = () => {
+    return (
+      <div>
+        This is the 404 page
+      </div>
+    );
+  }
+
+  test = () => {
+    console.log('ho gaya');
+  }
+
+  render() {
+    const {loader_loaded=false} = this.props;
+    return (
+        <RouteWrapper
+          atEnter={{ top: 100, active: 100 }}
+          atLeave={{ top: 0, active: 0 }}
+          atActive={{ top: 100, active: 100 }}
+          mapStyles={(styles) => ({
+            top: styles.top,
+            active: styles.active
+          })}
+        >
+          <Route
+            exact
+            path="/"
+            render={this.Home}
+          />
+          <Route
+            exact
+            path="/profile"
+            render={this.Profile}
+          />
+          <Route
+            path="/work"
+            exact
+            render={this.Work}
+          />
+          <Route
+            path="/contact"
+            exact
+            render={this.Contact}
+          />
+          <Route
+            render={this.NoMatch()}
+          />
+        </RouteWrapper>
+    );
+  }
+}

 export default Routes;
diff --git a/src/scroll-effect/index.jsx b/src/scroll-effect/index.jsx
index f4b85aa..ea520f2 100644
--- a/src/scroll-effect/index.jsx
+++ b/src/scroll-effect/index.jsx
@@ -37,7 +37,7 @@ class ScrollEffect extends Component {
     }

     handleScroll = () => {
-        const {is_active=true} = this.props;
+        const {is_active=true, try_reload=false} = this.props;
         const {animated} =this.state;
         if (is_active && !animated) {
             const element = this.node;
@@ -51,6 +51,8 @@ class ScrollEffect extends Component {
                   animated: true,
                   is_transitioning: true
                 });
+            } else {
+                try_reload && setTimeout(this.handleScroll, 0);
             }
         }
     }
@@ -61,8 +63,7 @@ class ScrollEffect extends Component {
         setTimeout(this.handleScroll, delay);
         const style = {
             transform: is_transitioning ? "translateY(0)" : "translateY(" + translateY_initial + "%)",
-            opacity: is_transitioning ? "1" : "0",
-            ...this.props.style
+            opacity: is_transitioning ? "1" : "0"
         };
         return (
             <div
